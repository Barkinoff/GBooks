// <auto-generated />
using System;
using GBooks.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GBooks.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240201102410_language_add_in_blog")]
    partial class language_add_in_blog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GBooks.Domain.Entites.Addresses.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Distinct")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("distinct");

                    b.Property<string>("DoorNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("door_number");

                    b.Property<string>("Floor")
                        .HasColumnType("text")
                        .HasColumnName("floor");

                    b.Property<string>("Home")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("home");

                    b.Property<int>("PostCode")
                        .HasColumnType("integer")
                        .HasColumnName("post_code");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Addresses.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Attachments.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("attachments");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Blogs.Blog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AttachmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("attachment_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("language_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId")
                        .IsUnique();

                    b.HasIndex("LanguageId")
                        .IsUnique();

                    b.ToTable("blogs");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Books.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AttachmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("attachment_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId")
                        .IsUnique();

                    b.ToTable("authors");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Books.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AttachmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("attachment_id");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long?>("DiscountId")
                        .HasColumnType("bigint")
                        .HasColumnName("discount_id");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("format");

                    b.Property<int>("IBSN")
                        .HasColumnType("integer")
                        .HasColumnName("i_b_s_n");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("PublicationDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("publication_date");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("publisher");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<long>("SubCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("sub_category_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId")
                        .IsUnique();

                    b.HasIndex("AuthorId");

                    b.HasIndex("DiscountId")
                        .IsUnique();

                    b.HasIndex("LanguageId")
                        .IsUnique();

                    b.HasIndex("SubCategoryId");

                    b.ToTable("books");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Carts.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("total_price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("carts");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Carts.CartItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<long>("CartId")
                        .HasColumnType("bigint")
                        .HasColumnName("cart_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_percent");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("total_price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.ToTable("cart_items");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Categories.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .IsUnique();

                    b.HasIndex("SubCategoryId")
                        .IsUnique();

                    b.ToTable("Category");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Categories.SubCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("sub_category");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Discounts.Discount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AttachmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("attachment_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Percent")
                        .HasColumnType("numeric")
                        .HasColumnName("percent");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId")
                        .IsUnique();

                    b.ToTable("discounts");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Feedbacks.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("feedbacks");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Languages.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("languages");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Orders.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeliveryDay")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivery_day");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("numeric")
                        .HasColumnName("delivery_fee");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long>("SuplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("suplier_id");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("total_price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("SuplierId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("orders");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Orders.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<long>("CartItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("cart_item_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_percent");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("total_price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex("CartItemId")
                        .IsUnique();

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("order_details");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Payments.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("pay_amount");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer")
                        .HasColumnName("payment_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Supliers.Suplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AttachmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("attachment_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Vehicle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vehicle");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId")
                        .IsUnique();

                    b.ToTable("supliers");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Users.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Users.RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("permission");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_permissions");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Addresses.Address", b =>
                {
                    b.HasOne("GBooks.Domain.Entites.Addresses.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Blogs.Blog", b =>
                {
                    b.HasOne("GBooks.Domain.Entites.Attachments.Attachment", "Attachment")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Blogs.Blog", "AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GBooks.Domain.Entites.Languages.Language", "Language")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Blogs.Blog", "LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Books.Author", b =>
                {
                    b.HasOne("GBooks.Domain.Entites.Attachments.Attachment", "Attachment")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Books.Author", "AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Books.Book", b =>
                {
                    b.HasOne("GBooks.Domain.Entites.Attachments.Attachment", "Attachment")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Books.Book", "AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GBooks.Domain.Entites.Books.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GBooks.Domain.Entites.Discounts.Discount", "Discount")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Books.Book", "DiscountId");

                    b.HasOne("GBooks.Domain.Entites.Languages.Language", "Language")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Books.Book", "LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GBooks.Domain.Entites.Categories.SubCategory", "SubCategory")
                        .WithMany("Books")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Author");

                    b.Navigation("Discount");

                    b.Navigation("Language");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Carts.Cart", b =>
                {
                    b.HasOne("GBooks.Domain.Entites.Users.User", "User")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Carts.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Carts.CartItem", b =>
                {
                    b.HasOne("GBooks.Domain.Entites.Books.Book", "Book")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Carts.CartItem", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GBooks.Domain.Entites.Carts.Cart", "Cart")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Carts.CartItem", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Categories.Category", b =>
                {
                    b.HasOne("GBooks.Domain.Entites.Categories.Category", "ParentCategory")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Categories.Category", "ParentId");

                    b.HasOne("GBooks.Domain.Entites.Categories.SubCategory", "SubCategory")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Categories.Category", "SubCategoryId");

                    b.Navigation("ParentCategory");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Discounts.Discount", b =>
                {
                    b.HasOne("GBooks.Domain.Entites.Attachments.Attachment", "Attachment")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Discounts.Discount", "AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Feedbacks.Feedback", b =>
                {
                    b.HasOne("GBooks.Domain.Entites.Books.Book", "Book")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Feedbacks.Feedback", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GBooks.Domain.Entites.Users.User", "User")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Feedbacks.Feedback", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Orders.Order", b =>
                {
                    b.HasOne("GBooks.Domain.Entites.Addresses.Address", "Address")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Orders.Order", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GBooks.Domain.Entites.Payments.Payment", "Payment")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Orders.Order", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GBooks.Domain.Entites.Supliers.Suplier", "Suplier")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Orders.Order", "SuplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GBooks.Domain.Entites.Users.User", "User")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Orders.Order", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Payment");

                    b.Navigation("Suplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Orders.OrderDetail", b =>
                {
                    b.HasOne("GBooks.Domain.Entites.Books.Book", "Book")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Orders.OrderDetail", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GBooks.Domain.Entites.Carts.CartItem", "CartItem")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Orders.OrderDetail", "CartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GBooks.Domain.Entites.Orders.Order", "Order")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Orders.OrderDetail", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("CartItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Supliers.Suplier", b =>
                {
                    b.HasOne("GBooks.Domain.Entites.Attachments.Attachment", "Attachment")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Supliers.Suplier", "AttachmentId");

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Users.RolePermission", b =>
                {
                    b.HasOne("GBooks.Domain.Entites.Users.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Users.User", b =>
                {
                    b.HasOne("GBooks.Domain.Entites.Addresses.Address", "Address")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Users.User", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GBooks.Domain.Entites.Users.Role", "Role")
                        .WithOne()
                        .HasForeignKey("GBooks.Domain.Entites.Users.User", "RoleId");

                    b.Navigation("Address");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Books.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Categories.SubCategory", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("GBooks.Domain.Entites.Users.Role", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
